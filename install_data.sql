-- Mainsystem Installation Data SQL Script
-- This script populates essential initial data.
-- Run this AFTER running database_structure.sql

-- --------------------------------------------------------
-- Default Roles
-- --------------------------------------------------------
INSERT IGNORE INTO `roles` (`role_key`, `role_name`, `role_description`, `is_system_role`, `created_at`) VALUES
('admin', 'Administrator', 'Has full system access and all permissions.', TRUE, NOW()),
('editor', 'Editor', 'Can manage content and specific sections.', FALSE, NOW()),
('user', 'User', 'Standard user with basic access.', FALSE, NOW());

-- --------------------------------------------------------
-- Default Admin User
-- --------------------------------------------------------
-- IMPORTANT: Replace 'YOUR_SECURE_HASHED_PASSWORD_HERE' with a password hash generated by password_hash() in PHP.
-- You can use the provided hash_password.php script (e.g., echo password_hash("yourChosenPassword", PASSWORD_DEFAULT); )
INSERT INTO `users` (`user_id`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_registered`, `user_status`, `display_name`, `user_role`) VALUES
(1, 'admin', '$2y$10$DcqROgHtfmKP96yjbg1VGeEnWa8APzrpxFcGHf5SoZZ4iEAf5bNSe', 'admin', 'admin@example.com', NOW(), 0, 'Site Administrator', 'admin');

-- --------------------------------------------------------
-- Default Site Options
-- These should align with defaults in config.php or desired initial values.
-- --------------------------------------------------------
INSERT IGNORE INTO `options` (`option_name`, `option_value`, `autoload`) VALUES
('site_name', 'Mainsystem', 'yes'),
('site_tagline', 'Your Company Core System', 'yes'),
('admin_email', 'admin@example.com', 'yes'), -- General admin email
('items_per_page', '10', 'yes'),
('site_description', 'Welcome to the Mainsystem application.', 'yes'),
('maintenance_mode', 'off', 'yes'),
('site_time_format', 'Y-m-d H:i', 'yes'), -- Default from config.php (e.g., 2025-06-02 15:30)
('site_email_notifications_enabled', 'on', 'yes'), -- Default from config.php
('site_email_from', 'noreply@example.com', 'yes'), -- Default from config.php
('site_admin_email_notifications', 'admin@example.com', 'yes'); -- Default from config.php

-- --------------------------------------------------------
-- Default Role Permissions
-- Assign all defined capabilities to the 'admin' role.
-- Assign basic capabilities to 'user' and 'editor' roles.
-- --------------------------------------------------------

-- Admin Role Permissions (should have all capabilities)
INSERT IGNORE INTO `role_permissions` (`role_name`, `capability_key`) VALUES
('admin', 'ACCESS_ADMIN_PANEL'),
('admin', 'MANAGE_USERS'),
('admin', 'MANAGE_ROLES'),
('admin', 'MANAGE_ROLES_PERMISSIONS'),
('admin', 'MANAGE_DEPARTMENTS'),
('admin', 'MANAGE_SITE_SETTINGS'),
('admin', 'VIEW_REPORTS'),
('admin', 'MANAGE_ROOMS'), -- Legacy/Super capability for rooms
('admin', 'VIEW_ROOMS'),
('admin', 'CREATE_ROOMS'),
('admin', 'EDIT_ROOMS'),
('admin', 'DELETE_ROOMS'),
('admin', 'CREATE_ROOM_RESERVATIONS'),
('admin', 'EDIT_OWN_ROOM_RESERVATIONS'),
('admin', 'CANCEL_OWN_ROOM_RESERVATIONS'),
('admin', 'VIEW_ALL_ROOM_RESERVATIONS'),
('admin', 'APPROVE_DENY_ROOM_RESERVATIONS'),
('admin', 'EDIT_ANY_ROOM_RESERVATION'),
('admin', 'DELETE_ANY_ROOM_RESERVATION'),
-- Vehicle Management Capabilities for Admin (already there or add if missing)
('admin', 'VIEW_VEHICLES'),
('admin', 'CREATE_VEHICLES'),
('admin', 'EDIT_VEHICLES'),
('admin', 'DELETE_VEHICLES'),
-- NEW Vehicle Reservation Capabilities for Admin
('admin', 'CREATE_VEHICLE_RESERVATIONS'),
('admin', 'EDIT_OWN_VEHICLE_RESERVATIONS'),
('admin', 'CANCEL_OWN_VEHICLE_RESERVATIONS'),
('admin', 'VIEW_ALL_VEHICLE_RESERVATIONS'),
('admin', 'APPROVE_DENY_VEHICLE_RESERVATIONS'),
('admin', 'EDIT_ANY_VEHICLE_RESERVATION'),
('admin', 'DELETE_ANY_VEHICLE_RESERVATION'),
-- End NEW Vehicle Reservation Capabilities for Admin
('admin', 'MANAGE_IT_REQUESTS'),
('admin', 'MANAGE_RAP_CALENDAR'),
('admin', 'MANAGE_SES_DATA'),
('admin', 'MANAGE_DTR'),
('admin', 'MANAGE_ASSETS');

-- User Role Permissions (basic access)
INSERT IGNORE INTO `role_permissions` (`role_name`, `capability_key`) VALUES
('user', 'CREATE_ROOM_RESERVATIONS'),  -- Can create their own reservations
('user', 'CANCEL_OWN_ROOM_RESERVATIONS'), -- Can cancel their own pending reservations
('user', 'VIEW_ROOMS'), -- So they can see rooms to book
-- NEW Vehicle Reservation Capabilities for User
('user', 'VIEW_VEHICLES'), -- So they can see vehicles to book/request
('user', 'CREATE_VEHICLE_RESERVATIONS'),
('user', 'CANCEL_OWN_VEHICLE_RESERVATIONS');
-- End NEW Vehicle Reservation Capabilities for User

-- Editor Role Permissions (example - adjust as needed)
INSERT IGNORE INTO `role_permissions` (`role_name`, `capability_key`) VALUES
('editor', 'VIEW_ROOMS'),
('editor', 'CREATE_ROOM_RESERVATIONS'),
('editor', 'CANCEL_OWN_ROOM_RESERVATIONS'),
('editor', 'VIEW_REPORTS'); -- Example capability

-- --------------------------------------------------------
-- Sample Departments
-- --------------------------------------------------------
INSERT IGNORE INTO `departments` (`department_name`, `department_description`, `created_at`) VALUES
('General Management', 'Oversees all company operations.', NOW()),
('Human Resources', 'Handles employee relations, recruitment, and benefits.', NOW()),
('IT Department', 'Manages technology infrastructure and support.', NOW()),
('Finance', 'Manages company finances and accounting.', NOW()),
('Operations', 'Handles day-to-day operational activities.', NOW());

-- Assign the default admin user (ID 1) to a department (e.g., General Management)
-- First, get the department_id for 'General Management' (assuming it's the first one inserted)
-- This part is a bit tricky in plain SQL without variables.
-- For simplicity, let's assume 'General Management' gets ID 1 if it's the first.
-- UPDATE `users` SET `department_id` = (SELECT `department_id` FROM `departments` WHERE `department_name` = 'General Management' LIMIT 1) WHERE `user_id` = 1;
-- A safer approach if IDs are auto-incremented and known:
-- UPDATE `users` SET `department_id` = 1 WHERE `user_id` = 1; -- Assuming 'General Management' is dept_id 1

-- --------------------------------------------------------
-- Sample Room
-- --------------------------------------------------------
-- Assuming user_id 1 (admin) is creating this room.
INSERT INTO `objects` (`object_author`, `object_date`, `object_date_gmt`, `object_content`, `object_title`, `object_excerpt`, `object_status`, `comment_status`, `ping_status`, `object_password`, `object_name`, `object_modified`, `object_modified_gmt`, `object_parent`, `guid`, `menu_order`, `object_type`, `object_mime_type`) VALUES
(1, NOW(), NOW(), 'A standard meeting room with a projector and whiteboard, suitable for up to 10 people.', 'Conference Room Alpha', 'Standard meeting room for 10.', 'available', 'closed', 'closed', '', 'conference-room-alpha', NOW(), NOW(), 0, '', 0, 'room', '');

-- Get the object_id of the room just inserted (this is tricky in plain SQL without variables)
-- For the purpose of this script, we'll assume it gets object_id = 1 if it's the first object.
-- If you have other objects, you'll need to find its ID.
-- SET @last_room_id = LAST_INSERT_ID(); -- This works in MySQL client, but not always in script runners.

-- Manually insert metadata for the room assuming its object_id is known (e.g., 1 if it's the first object)
-- If you have other objects, query for the ID of 'conference-room-alpha' of type 'room'.
-- Example: INSERT INTO `objectmeta` (`object_id`, `meta_key`, `meta_value`) VALUES ((SELECT object_id FROM objects WHERE object_name = 'conference-room-alpha' AND object_type = 'room' LIMIT 1), 'room_capacity', '10');
-- For simplicity, if this is the VERY FIRST object in the 'objects' table:
INSERT INTO `objectmeta` (`object_id`, `meta_key`, `meta_value`) VALUES
(1, 'room_capacity', '10'),
(1, 'room_location', 'Building A, 2nd Floor'),
(1, 'room_equipment', 'Projector, Whiteboard, Conference Phone');

-- --------------------------------------------------------
-- Sample User (Test User) - if not already created by other scripts
-- --------------------------------------------------------
-- IMPORTANT: Replace 'ANOTHER_SECURE_HASHED_PASSWORD' with a generated hash.
-- INSERT IGNORE INTO `users` (`user_login`, `user_pass`, `user_nicename`, `user_email`, `user_registered`, `user_status`, `display_name`, `user_role`, `department_id`)
-- VALUES ('testuser', 'ANOTHER_SECURE_HASHED_PASSWORD', 'testuser', 'testuser@example.com', NOW(), 0, 'Test User', 'user', (SELECT `department_id` FROM `departments` WHERE `department_name` = 'IT Department' LIMIT 1));


SELECT 'Installation data script completed.' AS Status;
